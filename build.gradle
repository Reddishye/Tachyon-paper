plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'com.gradleup.shadow' version '9.0.0-beta4'
    id 'io.github.gradle.nullaway' version '1.3.0' apply false
}

apply plugin: 'maven-publish'

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    maven {
        url = uri('https://repo.papermc.io/repository/maven-public/')
    }
    maven {
        url = uri('https://jitpack.io')
    }
    maven {
        url = uri("https://repo.codemc.io/repository/maven-snapshots/")
    }
    maven {
        name = "papermc"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        url = uri('https://plugins.gradle.org/m2/')
    }
}

dependencies {
    api libs.org.jetbrains.annotations
    compileOnly libs.io.papermc.paper.api
    implementation 'com.github.retrooper.packetevents:spigot:2.2.0'
    implementation 'com.google.inject:guice:7.0.0'
    implementation 'com.google.inject.extensions:guice-assistedinject:7.0.0'
}

group = 'es.redactado'
version = '1.0'
description = 'TachyonRefreshed'
java.sourceCompatibility = JavaVersion.VERSION_21

java {
    withSourcesJar()
    withJavadocJar()
}

afterEvaluate {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                groupId = 'com.github.redactado'
                artifactId = 'TachyonRefreshed'
                version = project.version
            }
        }
    }
}

sourceSets.configureEach { set ->
    artifacts {
        archives shadowJar
    }
}

wrapper {
    gradleVersion = "8.10"
    distributionType = Wrapper.DistributionType.ALL
}

shadowJar {
    archiveBaseName.set('TachyonRefreshed')
    archiveClassifier.set('')
    archiveVersion.set('')
    relocate 'io.github.retrooper.packetevents', 'es.redactado.tachyonRefreshed.lib.packetevents'
    relocate 'com.google.inject', 'es.redactado.tachyonRefreshed.lib.guice'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

jar {
    from shadowJar.outputs
}